{"/home/travis/build/npmtest/node-npmtest-cordova/test.js":"/* istanbul instrument in package npmtest_cordova */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova/lib.npmtest_cordova.js":"/* istanbul instrument in package npmtest_cordova */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_cordova.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_cordova.__dirname +\n                    '/lib.npmtest_cordova.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova/cordova/cordova.js":"/**\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n*/\n\n// All cordova js API moved to cordova-lib. If you don't need the cordova CLI,\n// use cordova-lib directly.\n\nvar cordova_lib = require('cordova-lib');\nmodule.exports = cordova_lib.cordova;\n\n// Also export the cordova-lib so that downstream consumers of cordova lib and\n// CLI will be able to use CLI's cordova-lib and avoid the risk of having two\n// different versions of cordova-lib which would result in two instances of\n// \"events\" and can cause bad event handling.\nmodule.exports.cordova_lib = cordova_lib;\nmodule.exports.cli = require('./src/cli');\n","/home/travis/build/npmtest/node-npmtest-cordova/cordova/src/cli.js":"/**\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n*/\n\n/* jshint node:true, bitwise:true, undef:true, trailing:true, quotmark:true,\n          indent:4, unused:vars, latedef:nofunc,\n          laxcomma:true\n*/\n\n\nvar path = require('path'),\n    help = require('./help'),\n    nopt,\n    _,\n    updateNotifier,\n    pkg = require('../package.json'),\n    telemetry = require('./telemetry'),\n    Q = require('q');\n\nvar cordova_lib = require('cordova-lib'),\n    CordovaError = cordova_lib.CordovaError,\n    cordova = cordova_lib.cordova,\n    events = cordova_lib.events,\n    logger = require('cordova-common').CordovaLogger.get();\n\nvar msg,\n    badPlatforms;\n\n\n/*\n * init\n *\n * initializes nopt and underscore\n * nopt and underscore are require()d in try-catch below to print a nice error\n * message if one of them is not installed.\n */\nfunction init() {\n    try {\n        nopt = require('nopt');\n        _ = require('underscore');\n        updateNotifier = require('update-notifier');\n    } catch (e) {\n        console.error(\n            'Please run npm install from this directory:\\n\\t' +\n            path.dirname(__dirname)\n        );\n        process.exit(2);\n    }\n}\n\nfunction checkForUpdates() {\n    try {\n        // Checks for available update and returns an instance\n        var notifier = updateNotifier({\n            pkg: pkg\n        });\n\n        // Notify using the built-in convenience method\n        notifier.notify();\n    } catch (e) {\n        // https://issues.apache.org/jira/browse/CB-10062\n        if (e && e.message && /EACCES/.test(e.message)) {\n            console.log('Update notifier was not able to access the config file.\\n' +\n                'You may grant permissions to the file: \\'sudo chmod 744 ~/.config/configstore/update-notifier-cordova.json\\'');\n        } else {\n            throw e;\n        }\n    }\n}\n\nvar shouldCollectTelemetry = false;\nmodule.exports = function (inputArgs, cb) {\n    \n    /**\n     * mainly used for testing.\n     */\n    cb = cb || function(){};\n    \n    init();\n    \n    // If no inputArgs given, use process.argv.\n    inputArgs = inputArgs || process.argv;\n    var cmd = inputArgs[2]; // e.g: inputArgs= 'node cordova run ios'\n    var subcommand = getSubCommand(inputArgs, cmd);\n    var isTelemetryCmd = (cmd === 'telemetry');\n\n    // ToDO: Move nopt-based parsing of args up here\n    if(cmd === '--version' || cmd === '-v') {\n        cmd = 'version';\n    } else if(!cmd || cmd === '--help' || cmd === 'h') {\n        cmd = 'help';\n    }\n            \n    Q().then(function() {\n        \n        /**\n         * Skip telemetry prompt if:\n         * - CI environment variable is present\n         * - Command is run with `--no-telemetry` flag\n         * - Command ran is: `cordova telemetry on | off | ...`\n         */\n        \n        if(telemetry.isCI(process.env) || telemetry.isNoTelemetryFlag(inputArgs)) {\n            return Q(false);\n        }\n        \n        /**\n         * We shouldn't prompt for telemetry if user issues a command of the form: `cordova telemetry on | off | ...x`\n         * Also, if the user has already been prompted and made a decision, use his saved answer\n         */\n        if(isTelemetryCmd) {\n            var isOptedIn = telemetry.isOptedIn();\n            return handleTelemetryCmd(subcommand, isOptedIn);\n        }\n        \n        if(telemetry.hasUserOptedInOrOut()) {\n            return Q(telemetry.isOptedIn());\n        }\n        \n        /**\n         * Otherwise, prompt user to opt-in or out\n         * Note: the prompt is shown for 30 seconds. If no choice is made by that time, User is considered to have opted out.\n         */\n        return telemetry.showPrompt();\n    }).then(function (collectTelemetry) {\n        shouldCollectTelemetry = collectTelemetry;\n        if(isTelemetryCmd) {\n            return Q();\n        }\n        return cli(inputArgs);\n    }).then(function () {\n        if (shouldCollectTelemetry && !isTelemetryCmd) {\n            telemetry.track(cmd, subcommand, 'successful');\n        }\n        // call cb with error as arg if something failed\n        cb(null);\n    }).fail(function (err) {\n        if (shouldCollectTelemetry && !isTelemetryCmd) {\n            telemetry.track(cmd, subcommand, 'unsuccessful');\n        }\n        // call cb with error as arg if something failed\n        cb(err);\n        throw err;\n    }).done();\n};\n\nfunction getSubCommand(args, cmd) {\n    if(cmd === 'platform' || cmd === 'platforms' || cmd === 'plugin' || cmd === 'plugins' || cmd === 'telemetry') {\n        return args[3]; // e.g: args='node cordova platform rm ios', 'node cordova telemetry on'\n    }\n    return null;\n}\n\nfunction handleTelemetryCmd(subcommand, isOptedIn) {\n    \n    if (subcommand !== 'on' && subcommand !== 'off') {\n        logger.subscribe(events);\n        return help(['telemetry']);\n    }\n    \n    var turnOn = subcommand === 'on' ? true : false;\n    var cmdSuccess = true;\n\n    // turn telemetry on or off\n    try {\n        if (turnOn) {\n            telemetry.turnOn();\n            console.log('Thanks for opting into telemetry to help us improve cordova.');\n        } else {\n            telemetry.turnOff();\n            console.log('You have been opted out of telemetry. To change this, run: cordova telemetry on.');\n        }\n    } catch (ex) {\n        cmdSuccess = false;\n    }\n\n    // track or not track ?, that is the question\n\n    if (!turnOn) {\n        // Always track telemetry opt-outs (whether user opted out or not!)\n        telemetry.track('telemetry', 'off', 'via-cordova-telemetry-cmd', cmdSuccess ? 'successful': 'unsuccessful');\n        return Q();\n    }\n    \n    if(isOptedIn) {\n        telemetry.track('telemetry', 'on', 'via-cordova-telemetry-cmd', cmdSuccess ? 'successful' : 'unsuccessful');\n    }\n    \n    return Q();\n}\n\nfunction cli(inputArgs) {\n    // When changing command line arguments, update doc/help.txt accordingly.\n    var knownOpts =\n        { 'verbose' : Boolean\n        , 'version' : Boolean\n        , 'help' : Boolean\n        , 'silent' : Boolean\n        , 'experimental' : Boolean\n        , 'noregistry' : Boolean\n        , 'nohooks': Array\n        , 'shrinkwrap' : Boolean\n        , 'copy-from' : String\n        , 'link-to' : path\n        , 'searchpath' : String\n        , 'variable' : Array\n        , 'link': Boolean\n        , 'force': Boolean\n        // Flags to be passed to `cordova build/run/emulate`\n        , 'debug' : Boolean\n        , 'release' : Boolean\n        , 'archs' : String\n        , 'device' : Boolean\n        , 'emulator': Boolean\n        , 'target' : String\n        , 'browserify': Boolean\n        , 'noprepare': Boolean\n        , 'fetch': Boolean\n        , 'nobuild': Boolean\n        , 'list': Boolean\n        , 'buildConfig' : String\n        , 'template' : String\n        };\n\n    var shortHands =\n        { 'd' : '--verbose'\n        , 'v' : '--version'\n        , 'h' : '--help'\n        , 'src' : '--copy-from'\n        , 't' : '--template'\n        };\n\n    checkForUpdates();\n\n    var args = nopt(knownOpts, shortHands, inputArgs);\n\n    // For CordovaError print only the message without stack trace unless we\n    // are in a verbose mode.\n    process.on('uncaughtException', function(err) {\n        logger.error(err);\n        // Don't send exception details, just send that it happened\n        if(shouldCollectTelemetry) {\n            telemetry.track('uncaughtException');\n        }\n        process.exit(1);\n    });\n\n    logger.subscribe(events);\n\n    if (args.silent) {\n        logger.setLevel('error');\n    }\n\n    if (args.verbose) {\n        logger.setLevel('verbose');\n    }\n\n    var cliVersion = require('../package').version;\n    // TODO: Use semver.prerelease when it gets released\n    var usingPrerelease = /-nightly|-dev$/.exec(cliVersion);\n    if (args.version || usingPrerelease) {\n        var libVersion = require('cordova-lib/package').version;\n        var toPrint = cliVersion;\n        if (cliVersion != libVersion || usingPrerelease) {\n            toPrint += ' (cordova-lib@' + libVersion + ')';\n        }\n\n        if (args.version) {\n            logger.results(toPrint);\n            return Q();\n        } else {\n            // Show a warning and continue\n            logger.warn('Warning: using prerelease version ' + toPrint);\n        }\n    }\n\n    if (/^v0.\\d+[.\\d+]*/.exec(process.version)) { // matches v0.* \n        msg = 'Warning: using node version ' + process.version +\n                ' which has been deprecated. Please upgrade to the latest node version available (v6.x is recommended).';\n        logger.warn(msg);\n    }\n\n    // If there were arguments protected from nopt with a double dash, keep\n    // them in unparsedArgs. For example:\n    // cordova build ios -- --verbose --whatever\n    // In this case \"--verbose\" is not parsed by nopt and args.vergbose will be\n    // false, the unparsed args after -- are kept in unparsedArgs and can be\n    // passed downstream to some scripts invoked by Cordova.\n    var unparsedArgs = [];\n    var parseStopperIdx =  args.argv.original.indexOf('--');\n    if (parseStopperIdx != -1) {\n        unparsedArgs = args.argv.original.slice(parseStopperIdx + 1);\n    }\n\n    // args.argv.remain contains both the undashed args (like platform names)\n    // and whatever unparsed args that were protected by \" -- \".\n    // \"undashed\" stores only the undashed args without those after \" -- \" .\n    var remain = args.argv.remain;\n    var undashed = remain.slice(0, remain.length - unparsedArgs.length);\n    var cmd = undashed[0];\n    var subcommand;\n    var known_platforms = Object.keys(cordova_lib.cordova_platforms);\n    msg = '';\n\n    if ( !cmd || cmd == 'help' || args.help ) {\n        if (!args.help && remain[0] == 'help') {\n            remain.shift();\n        }\n        return help(remain);\n    }\n\n    if ( !cordova.hasOwnProperty(cmd) ) {\n        msg =\n            'Cordova does not know ' + cmd + '; try `' + cordova_lib.binname +\n            ' help` for a list of all the available commands.';\n        throw new CordovaError(msg);\n    }\n\n    var opts = {\n        platforms: [],\n        options: [],\n        verbose: args.verbose || false,\n        silent: args.silent || false,\n        browserify: args.browserify || false,\n        fetch: args.fetch || false,\n        nohooks: args.nohooks || [],\n        searchpath : args.searchpath\n    };\n\n\n    if (cmd == 'emulate' || cmd == 'build' || cmd == 'prepare' || cmd == 'compile' || cmd == 'run' || cmd === 'clean') {\n        // All options without dashes are assumed to be platform names\n        opts.platforms = undashed.slice(1);\n        badPlatforms = _.difference(opts.platforms, known_platforms);\n        if( !_.isEmpty(badPlatforms) ) {\n            msg = 'Unknown platforms: ' + badPlatforms.join(', ');\n            throw new CordovaError(msg);\n        }\n\n        // Pass nopt-parsed args to PlatformApi through opts.options\n        opts.options = args;\n        opts.options.argv = unparsedArgs;\n\n        if (cmd === 'run' && args.list && cordova.raw.targets) {\n            return cordova.raw.targets.call(null, opts);\n        }\n\n        return cordova.raw[cmd].call(null, opts);\n    } else if (cmd === 'requirements') {\n        // All options without dashes are assumed to be platform names\n        opts.platforms = undashed.slice(1);\n        badPlatforms = _.difference(opts.platforms, known_platforms);\n        if( !_.isEmpty(badPlatforms) ) {\n            msg = 'Unknown platforms: ' + badPlatforms.join(', ');\n            throw new CordovaError(msg);\n        }\n\n        return cordova.raw[cmd].call(null, opts.platforms)\n            .then(function(platformChecks) {\n\n                var someChecksFailed = Object.keys(platformChecks).map(function(platformName) {\n                    events.emit('log', '\\nRequirements check results for ' + platformName + ':');\n                    var platformCheck = platformChecks[platformName];\n                    if (platformCheck instanceof CordovaError) {\n                        events.emit('warn', 'Check failed for ' + platformName + ' due to ' + platformCheck);\n                        return true;\n                    }\n\n                    var someChecksFailed = false;\n                    platformCheck.forEach(function(checkItem) {\n                        var checkSummary = checkItem.name + ': ' +\n                            (checkItem.installed ? 'installed ' : 'not installed ') +\n                            (checkItem.metadata.version || '');\n                        events.emit('log', checkSummary);\n                        if (!checkItem.installed) {\n                            someChecksFailed = true;\n                            events.emit('warn', checkItem.metadata.reason);\n                        }\n                    });\n\n                    return someChecksFailed;\n                }).some(function(isCheckFailedForPlatform) {\n                    return isCheckFailedForPlatform;\n                });\n\n                if (someChecksFailed) throw new CordovaError('Some of requirements check failed');\n            });\n    } else if (cmd == 'serve') {\n        var port = undashed[1];\n        return cordova.raw.serve(port);\n    } else if (cmd == 'create') {\n        return create();\n    } else {\n        // platform/plugins add/rm [target(s)]\n        subcommand = undashed[1]; // sub-command like \"add\", \"ls\", \"rm\" etc.\n        var targets = undashed.slice(2); // array of targets, either platforms or plugins\n        var cli_vars = {};\n        if (args.variable) {\n            args.variable.forEach(function (s) {\n                // CB-9171\n                var eq = s.indexOf('=');\n                if (eq == -1)\n                    throw new CordovaError('invalid variable format: ' + s);\n                var key = s.substr(0, eq).toUpperCase();\n                var val = s.substr(eq + 1, s.length);\n                cli_vars[key] = val;\n            });\n        }\n        var download_opts = { searchpath : args.searchpath\n                            , noregistry : args.noregistry\n                            , nohooks : args.nohooks\n                            , cli_variables : cli_vars\n                            , browserify: args.browserify || false\n                            , fetch: args.fetch || false\n                            , link: args.link || false\n                            , save: args.save || false\n                            , shrinkwrap: args.shrinkwrap || false\n                            , force: args.force || false\n                            };\n        return cordova.raw[cmd](subcommand, targets, download_opts);\n    }\n\n    function create() {\n        var cfg;            // Create config\n        var customWww;      // Template path\n        var wwwCfg;         // Template config\n\n        // If we got a fourth parameter, consider it to be JSON to init the config.\n        if (undashed[4])\n            cfg = JSON.parse(undashed[4]);\n        else\n            cfg = {};\n\n        customWww = args['copy-from'] || args['link-to'] || args.template;\n\n        if (customWww) {\n            if (!args.template && !args['copy-from'] && customWww.indexOf('http') === 0) {\n                throw new CordovaError(\n                    'Only local paths for custom www assets are supported for linking' + customWww\n                );\n            }\n\n            // Resolve tilda\n            if (customWww.substr(0,1) === '~')\n                customWww = path.join(process.env.HOME,  customWww.substr(1));\n\n            wwwCfg = {\n                url: customWww,\n                template: false,\n                link: false\n            };\n\n            if (args['link-to']) {\n                wwwCfg.link = true;\n            }\n            if (args.template) {\n                wwwCfg.template = true;\n            } else if (args['copy-from']) {\n                logger.warn('Warning: --copy-from option is being deprecated. Consider using --template instead.');\n                wwwCfg.template = true;\n            }\n\n            cfg.lib = cfg.lib || {};\n            cfg.lib.www = wwwCfg;\n        }\n        return cordova.raw.create( undashed[1]  // dir to create the project in\n            , undashed[2]  // App id\n            , undashed[3]  // App name\n            , cfg\n            , events || undefined\n        );\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-cordova/cordova/src/help.js":"/**\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n*/\nvar fs = require('fs'),\n    cordova_lib = require('cordova-lib'),\n    cordova = cordova_lib.cordova,\n    Q = require('q'),\n    path = require('path');\n\nmodule.exports = function help (args) {\n    var command,\n        file,\n        raw,\n        docdir;\n    args = args || [];\n    command = ((args)[0] || 'cordova');\n    docdir = path.join(__dirname, '..', 'doc');\n    file = [\n      command + '.md',\n      command + '.txt',\n      'cordova.md',\n      'cordova.txt',\n    ].map(function (file) {\n        var f = path.join(docdir, file);\n        if (fs.existsSync(f)) {\n           return f;\n        }\n        return null;\n    }).filter(function (f) {\n        return f !== null;\n    });\n    raw = fs.readFileSync(file[0]).toString('utf8').replace(/cordova-cli/g, cordova_lib.binname);\n    cordova.emit('results', raw);\n    return Q();\n};\n","/home/travis/build/npmtest/node-npmtest-cordova/cordova/src/telemetry.js":"/**\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n*/\n\n/* jshint node:true, bitwise:true, undef:true, trailing:true, quotmark:true,\n          indent:4, unused:vars, latedef:nofunc,\n          laxcomma:true\n*/\n\n\n\n// For further details on telemetry, see:\n// https://github.com/cordova/cordova-discuss/pull/43\n\nvar Q = require('q');\n\n// Google Analytics tracking code\nvar GA_TRACKING_CODE = 'UA-64283057-7';\n\nvar pkg = require('../package.json');\nvar Insight = require('insight');\nvar insight = new Insight({\n    trackingCode: GA_TRACKING_CODE,\n    pkg: pkg\n});\n\n/**\n * Returns true if the user opted in, and false otherwise\n */\nfunction showPrompt() {\n\n    var deferred = Q.defer();\n    \n    var msg = 'May Cordova anonymously report usage statistics to improve the tool over time?';\n    insight.askPermission(msg, function (unused, optIn) {\n        var EOL = require('os').EOL;\n        if (optIn) {\n            console.log(EOL + 'Thanks for opting into telemetry to help us improve cordova.');\n            track('telemetry', 'on', 'via-cli-prompt-choice', 'successful');\n        } else {\n            console.log(EOL + 'You have been opted out of telemetry. To change this, run: cordova telemetry on.');\n            // Always track telemetry opt-outs! (whether opted-in or opted-out)\n            track('telemetry', 'off', 'via-cli-prompt-choice', 'successful');\n        }\n        \n        deferred.resolve(optIn); \n    });\n    \n    return deferred.promise;\n}\n\nfunction track() {\n    // Remove empty, null or undefined strings from arguments\n    for (var property in arguments) {\n        var val = arguments[property]; \n        if (!val || val.length === 0) {\n            delete arguments.property;\n        }\n    }\n    insight.track.apply(insight, arguments);\n}\n\nfunction turnOn() {\n    insight.optOut = false;\n}\n\nfunction turnOff() {\n    insight.optOut = true;\n}\n\n/**\n * Clears telemetry setting\n * Has the same effect as if user never answered the telemetry prompt\n * Useful for testing purposes\n */\nfunction clear() {\n    insight.optOut = undefined;\n}\n\nfunction isOptedIn() {\n    return !insight.optOut;\n}\n\n/**\n * Has the user already answered the telemetry prompt? (thereby opting in or out?)\n */\nfunction hasUserOptedInOrOut() {\n    var insightOptOut = insight.optOut === undefined;\n    return !(insightOptOut);\n}\n\n/**\n * Is the environment variable 'CI' specified ?\n */\nfunction isCI(env) {\n    return !!env.CI;\n}\n\n/**\n * Has the user ran a command of the form: `cordova run --no-telemetry` ?\n */\nfunction isNoTelemetryFlag(args) {\n    return args.indexOf('--no-telemetry') > -1;\n}\n\nmodule.exports = {\n    track: track,\n    turnOn: turnOn,\n    turnOff: turnOff,\n    clear: clear,\n    isOptedIn: isOptedIn,\n    hasUserOptedInOrOut: hasUserOptedInOrOut,\n    isCI: isCI,\n    showPrompt: showPrompt,\n    isNoTelemetryFlag: isNoTelemetryFlag\n};"}